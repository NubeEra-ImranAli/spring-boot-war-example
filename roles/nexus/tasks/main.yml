---
# Define the variables
vars:
  nexus_version: "3.79.0-09"
  nexus_install_dir: "/opt/nexus"
  sonatype_work_dir: "/opt/sonatype-work"
  nexus_user: "nexus"
  nexus_group: "nexus"
  nexus_tar_url: "https://download.sonatype.com/nexus/3/nexus-unix-x86-64-{{ nexus_version }}.tar.gz"

# Check if Java is installed
- name: Check if Java is installed
  command: java -version
  register: java_version
  ignore_errors: yes

# Install Java if not installed
- name: Install Java (only if not installed)
  when: java_version.failed
  apt:
    name: openjdk-17-jdk
    state: present

# Check if Nexus is installed
- name: Check if Nexus is installed
  stat:
    path: "{{ nexus_install_dir }}"
  register: nexus_stat

# Only install Nexus if it is not installed
- name: Install Nexus (if not installed)
  when: not nexus_stat.stat.exists
  block:
    - name: Ensure Nexus installation directory exists
      file:
        path: "{{ nexus_install_dir }}"
        state: directory
        owner: "{{ nexus_user }}"
        group: "{{ nexus_group }}"
        mode: '0755'

    - name: Ensure Sonatype work directory exists
      file:
        path: "{{ sonatype_work_dir }}"
        state: directory
        owner: "{{ nexus_user }}"
        group: "{{ nexus_group }}"
        mode: '0755'

    - name: Download Nexus
      get_url:
        url: "{{ nexus_tar_url }}"
        dest: /tmp/nexus-{{ nexus_version }}.tar.gz

    - name: Extract Nexus
      unarchive:
        src: "/tmp/nexus-{{ nexus_version }}.tar.gz"
        dest: /opt
        remote_src: yes
        creates: "{{ nexus_install_dir }}/nexus"

    - name: Create nexus user and group
      user:
        name: "{{ nexus_user }}"
        shell: /bin/bash
        password: "{{ 'nexus' | password_hash('sha512') }}"
        state: present

    - name: Set ownership of Nexus directory
      command:
        cmd: chown -R nexus:nexus {{ nexus_install_dir }}

    - name: Create systemd service file for Nexus
      copy:
        dest: /etc/systemd/system/nexus.service
        content: |
          [Unit]
          Description=Nexus Repository Manager
          After=network.target

          [Service]
          Type=forking
          ExecStart={{ nexus_install_dir }}/nexus/bin/nexus start
          ExecStop={{ nexus_install_dir }}/nexus/bin/nexus stop
          User=nexus
          Group=nexus
          UMask=0007
          RestartSec=10
          Restart=always
          LimitNOFILE=4096

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start Nexus service
      systemd:
        name: nexus
        state: started
        enabled: yes

# If Nexus is already installed, just ensure it's running
- name: Ensure Nexus service is running (if Nexus was already installed)
  when: nexus_stat.stat.exists
  systemd:
    name: nexus
    state: started
    enabled: yes
